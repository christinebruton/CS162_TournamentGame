/*********************************************************************
* Class: Character
* Abstraction the class represents: This is a day character used by
* all fictional fantasy combat game characters in the simulation.
* Purpose:  and abstract base class used to populate data members
* and virtual functions to  other child classes.
* How to use:  Implement virtual functions in the specific child classes.
*  populate the data member values in each class.
*
*********************************************************************/

#ifndef COMBATGAME_CHARACTER_H
#define COMBATGAME_CHARACTER_H


#include <stdio.h>
#include <iostream>
using std::cout; using std::cin; using std::endl;

class Character{

protected:
    int attack;
    int defense;
    int armor;
    int strengthPoints;

    //  used in a few different classes to determine whether the character has died
    bool isDead=false;

public:
    //constructor
    Character();

/*********************************************************************
* Function:Attack(Character *enemy)
* Purpose:  Take in a pointer to the character and calculate its total attack
* based on its individually implemented attack function.
* Arguments|Preconditions:  A pointer to the specific type of enemy character needs to be created
* and passed into this function
* Return Type: Int
*********************************************************************/

    virtual int Attack(Character *enemy) = 0;

/*********************************************************************
* Function:Defense(Character *enemy)
* Purpose:  Take in a pointer to the character  as well as the attack points
* generated by the enemy and calculate  the defenders  total defense and damage.
* Arguments|Preconditions:  A pointer to the specific type of enemy character needs to be created
* and passed into this function  as well as integer for the amount of the attackpoints
* generated by the enemy.
* Return Type: Int
*********************************************************************/
    virtual int Defense(Character *enemy, int damage) = 0;

    //getters/setters
    int getAttack() const;
    int getDefense() const;
    int getArmor() const;
    int getStrengthPoints() const;
    void setStrengthPoints(int strengthPoints);

/*********************************************************************
* Function: zeroOutDamage(int )
* Purpose:  Friend function used to earn negative damage value into zero damage.
*  this ensures that the damage/strength calculation is not messed up.
* Arguments|Preconditions:  integer for the total damage inflicted on the defender
* Return Type: int
*********************************************************************/
    int zeroOutDamage(int damage);

    //virtual destructor
    virtual ~Character();
};



#endif //COMBATGAME_CHARACTER_H
